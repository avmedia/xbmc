<%
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://www.xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 *  http://www.gnu.org/copyleft/gpl.html
 *
 */
%>
<%
    matcher = type =~ /Alternative<\((.*)\)>/
    vectype = '(' + matcher[0][1] + ')'
    boolean ispointer = swigTypeParser.SwigType_ispointer(type)
    int seq = sequence.increment()
    String accessor = ispointer ? '->' : '.'
    altAccess = [ 'former', 'later' ]
    altSwitch = [ 'first', 'second' ]
%>
    WhichAlternative pos = ${api}${accessor}which();

    if (<%if (ispointer) { %>${api} != NULL && <%}%>pos != XBMCAddon::none)
    { <%
      swigTypeParser.SwigType_parmlist(vectype).eachWithIndex { curType, entryIndex -> 
%>
      if (pos == XBMCAddon::${altSwitch[entryIndex]})
      {
        ${swigTypeParser.SwigType_str(swigTypeParser.SwigType_ltype(curType))}& entry${seq} = ${api}${accessor}${altAccess[entryIndex]}();
        {
          ${helper.getOutConversion(curType,result,method,[ 'api' : 'entry' + seq, 'sequence' : sequence ])}
        }
      }
<%
        }
%>
    }
    else
    { 
      ${result} = Py_None;
    }
